#
# おおまかなステップ
#
1.要件定義
2.開発環境作成
3.画面作成プログラミング＋テスト
4.要件と合致しているか確認
5.R-specで認証

1.要件定義
	＜モデル＞
		モデル:User(deviseの機能で作成)
		name				名前					string型
		introduction		自己紹介文			string型
		profile_image_id	refileの画像保存用	string型

		モデル:Book 
		title				本のタイトル			string型
		body				本の感想				text型
		# 要件を満たすために追加
		user_id				本を投稿したユーザ		string型

		関係性
		User 1:N Book

	＜コントローラ＞
		＊devise(認証機能)のコントローラは編集禁止なので、
		　追加したカラムはapplication_controllerに記載する。
		コントローラ:Users
			User周りの編集を行うためのコントローラ
				#edit		ユーザー画像、コメントの編集用
				#index		ユーザー一覧の表示
				#show(:id)	ユーザーの情報と、投稿した本の一覧を表示

		コントローラ:Books
			Booksの編集を行うためのコントローラ
				#create		本の新規投稿
				#edit		本の編集ページ
				#update		本の更新
				#show		Aさんが投稿した本の一覧表示（ホーム画面）
				#index		全員が投稿した本の一覧表示
				#destroy	本の削除

		コントローラ:home
			homeとtopページを管理
				#home 		aboutページ
				#top 		TOPページ

	<ビュー>
	# 共通ヘッダー
	_list.html.erb	ヘッダーメニュー

	＃ ログイン関連
	ログイン画面(devise自動生成？)
	サインアップ画面(devise自動生成？)
	パスワード忘れた画面(devise自動生成？)

	app/views/users/confirmations/new.html.erb
	app/views/users/mailer/confirmation_instructions.html.erb
	app/views/users/mailer/password_change.html.erb
	app/views/users/mailer/reset_password_instructions.html.erb
	app/views/users/mailer/unlock_instructions.html.erb
	app/views/users/passwords/edit.html.erb
	app/views/users/passwords/new.html.erb
	app/views/users/registrations/edit.html.erb
	app/views/users/registrations/new.html.erb
	ログイン  app/views/users/sessions/new.html.erb
	app/views/users/shared/_links.html.erb
	app/views/users/unlocks/new.html.erb

	# その他
	TOPページ		index.html.erb
	Aboutページ		about.html.erb

	# 投稿関連
	HOMEページ（ユーザーに紐づく本の一覧）		books/show.html.erb
	 ＊他のユーザーページから飛んだ場合とHOMEボタンから遷移した場合で
	   表示レイアウトを若干変える。
	Usersページ（ユーザーの一覧）				users/index.html.erb
	Booksページ（本の一覧）					books/index.html.erb
	# ユーザー関連
	User editページ（ユーザ情報変更）			users/edit.html.erb

2.開発環境作成
OK	2-1.アプリケーション資源の作成
		rails new bookers2
		作成後、カレントディレクトリの変更

OK	2-2.deviseのインストール
		Gemfileの中に以下のように記載
		gem 'devise'
		セーブ後、以下のコマンドで反映
		$ bundle install
		最後にdeviseを利用するための初期作業を実行
		$ rails g devise:install

OK	2-3.deviseのユーザーテーブル作成
		$ rails g devise User
		で実行後、db/migrate/YYYYMMDDHHMMSS_devise_create_users.rb
		の以下の箇所のコメントアウトを外す
		t.integer  :sign_in_count, default: 0, null: false
      	t.datetime :current_sign_in_at
      	t.datetime :last_sign_in_at
      	t.string   :current_sign_in_ip
        t.string   :last_sign_in_ip

        そして、今回追加したいカラムをコードに追記する。
        t.string :name
        t.string :introduction
        t.string :profile_image_id

        データベースに反映する。
        $ rails db:migrate

OK  2-4.deviseのカスタムビュー設定
    	deviseのカスタムビューを使えるように、以下のコマンドをたたく
    	$ rails g devise:views
    	app/views/devise/sessions/new.html.erb			サインアップ画面
    	app/views/devise/registrations/new.html.erb		新規登録画面
    	こいつを編集しよう。

OK  2-5.コントローラの作成
        rails g controller users edit index show
        rails g controller books create edit update show index destroy

        モデルの作成
        rails g model Book title:string body:text user_id:string
        rails db:migrate

3.開発
OK	3-1.ログインのviewを今回のやつに合わせて、
		ログイン画面
		デフォルト）Email,passwordログイン
		今回）name,passwordでログインできるようにする。

		新規登録画面
		デフォルト）Email,password,password(2回目)
		今回）　　　Name,Email,password,password(2回目)
		のカラムを変更する。

OK  3-2.application_controllerにdeviseで追加編集したカラムを記載
        して、今回追加したカラムも使用してログインできるようにする。
    	2章を参照

    	*ログイン認証キーはdeviseデフォルトでemail,passwordになっている。
    	 認証キーの設定は、
    	 config/initializers/devise.rbのところで
    	 config.authentication_keys = [:name]
    	 と記述してあげる必要がある。

    3-3.bootstrapの導入
    	8章を参照
    	gem fileに対して、以下の文を追加
    	gem 'bootstrap-sass', '~> 3.3.6'
		gem 'jquery-rails'

		application.cssの拡張子をscss（bootstrapで使えるやつ）
		に変更
		app/asset/stylesheet/application.css
					↓
		app/asset/stylesheet/application.scss

		application.scssに以下の文を追加
		@import "bootstrap-sprockets";  /*ここを追加*/
    	@import "bootstrap";            /*ここを追加*/

    	app/assets/javascripts/application.jsに
    	以下の文を追加 //も追加すること!!
    	//= require jquery
  		//= require bootstrap-sprockets

ほぼOK  	3-4.メニューバー作成

ほぼOK   3-3.ログイン画面　OK、新規登録画面のレイアウト作成 OK
			メニューバーのリンク設定もOK

ほぼOK   3-4.TOPページのレイアウト作成

ほぼOK   3-5.aboutページのレイアウト作成

ほぼOK   3-6.パスワード忘れた時画面のレイアウト作成

ほぼOK   3-7.homeページの作成

OK	3-8.ログイン、ログアウトによって
	　　　メニューを変える。

OK	3-9.refile,refile-mini_magickのgemを導入
		Gemfileに対して、以下の2行を追加
	    gem "refile", require: "refile/rails", github: 'manfe/refile'
		gem "refile-mini_magick"

OK	3-10.1:Nの関係性をモデルに実装
		app/models/user.rbに以下の文を追加
		has_many :books, dependent: :destroy

		app/models/book.rbに以下の文を追加
		belongs_to :user

		その後、以下の文をたたく
		rails db:migrate

OK	3-11.resourcesの設定


OK  3-12.ルーティング設定
   OK ルートパスから送られてきたコントローラで
   	　ログイン状態により分岐をかける。
   	　ログイン済み　→ 本の一覧表示
   	　ログインしてない　→ ログインを促すTOPページ

OK  3-13.新規投稿レイアウトの作成

ほぼOK	3-14.新規登録機能の作成

ほぼOK	3-15.ユーザー編集機能の作成
   		refile、refile-mini_magickのgemも導入する。
   		3章を参照

OK   	3-16.登録時のメッセージ表示

OK   	3-17.book一覧ページ作成

OK   	3-18.Book detail画面作成
   			ログインユーザー以外は編集リンクが見れないようにする。


OK   	3-19.book編集ページ作成

OK   	3-20.book削除機能作成

OK   	3-21.user一覧ページ作成


OK   	3-22.制御の実装
   		OK・他の人のやつ編集できないようにする。
   		OK・他の人のページに投稿できないようにする。
   		OK・ログインしてないのに、URL直接たたいてもアクセスできないようにする。
   			before_action :authenticate_user!
   			をapplication_controllerに追記した。

   			http://localhost:3000/books/1

   		OK・他の人の自己紹介文を変更できないようにした。

   		・本が長すぎる、エラーの投稿をした際に
   		エラーメッセージが各画面で表示できるようにする。

4.テスト。要件にあっているか画面単位でテストする。
　テストデータ
　＜ユーザー＞
	name:test
	email:test@gmail
	password:12345678

	name:testtest
	email:testtest@gmail
	password:12345678


5.R-なんとかの起動

6.提出


